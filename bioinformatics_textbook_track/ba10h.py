'''
Estimate the Parameters of an HMM
http://rosalind.info/problems/ba10h/

Given: A sequence of emitted symbols x = x1 . . . xn in an alphabet ∑ and a path π = π1 . . . πn generated by a k-state HMM with unknown transition and emission probabilities.

Return: A matrix of transition probabilities Transition and a matrix of emission probabilities Emission that maximize Pr(x,π) over all possible matrices of transition and emission probabilities.
'''
import numpy as np

filename = 'rosalind_ba10h.txt'

def estimate_hmm_params(x, sigma, pi, states):
	sigma_index = {val: i for i, val in enumerate(sigma)}
	states_index = {val: i for i, val in enumerate(states)}

	transition = np.zeros((len(states), len(states)))
	emission = np.zeros((len(states), len(sigma)))

	for xi, state, next_state in zip(x, pi, pi[1:]):
		transition[states_index[state], states_index[next_state]] += 1
		emission[states_index[state], sigma_index[xi]] += 1
	emission[states_index[pi[-1]], sigma_index[x[-1]]] += 1

	e_sum = emission.sum(axis=1).reshape(len(states), 1)
	emission = np.where(e_sum, emission / e_sum, 1 / len(sigma))
	t_sum = transition.sum(axis=1).reshape(len(states), 1)
	transition = np.where(t_sum, transition / t_sum, 1 / len(sigma))

	return transition, emission

def main():
	with open(filename) as f:
		lines = [line.strip() for line in f.readlines()]
	x = lines[0]
	sigma = lines[2].split()
	pi = lines[4]
	states = lines[6].split()

	transition, emission = estimate_hmm_params(x, sigma, pi, states)

	print('', *states, sep='\t')
	for i, row in zip(states, transition):
		print(i, *row, sep='\t')
	print('--------')
	print('', *sigma, sep='\t')
	for i, row in zip(states, emission):
		print(i, *row, sep='\t')

if __name__ == '__main__':
	main()
